"use client";

import React from "react";
import { Button } from "../ui/button";
import { toast } from "sonner";
import { Loader2, User } from "lucide-react";
import {
  authenticate,
  isStudentAuthenticated,
  verifyAuthentication,
} from "@/lib/server-actions/authenticator";
import Image from "next/image";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { OtpStyledInput } from "@/components/ui/otp-input";
import { logout } from "@/lib/server-actions/login";

const AuthenticatorComponent = () => {
  const [loading, setLoading] = React.useState(true); // Initial loading state
  const [loading2, setLoading2] = React.useState(false);
  const [qrCode, setQrCode] = React.useState<string | null>(null);
  const [isSecuring, setIsSecuring] = React.useState(true);
  const [studentNumber, setStudentNumber] = React.useState("");
  const [isAuthenticated, setIsAuthenticated] = React.useState(false);
  const [otp, setOtp] = React.useState("");

  React.useEffect(() => {
    const setupTOTP = async () => {
      try {
        // Check if the student is already authenticated
        const studentAuthenticated = await isStudentAuthenticated(
          studentNumber
        );
        if (studentAuthenticated) {
          setIsAuthenticated(true);
          setLoading(false); // After authentication is checked, set loading to false
          return;
        }

        const response = await authenticate();
        setQrCode(response.qrcode ?? "");
        setStudentNumber(response.student ?? "");
        setLoading(false); // After authentication flow is completed, set loading to false
      } catch (error) {
        console.error("Failed to set up TOTP", error);
        setLoading(false); // In case of error, still set loading to false
      }
    };

    setupTOTP();
  }, [studentNumber]);

  const handleConnect = async () => {
    setLoading2(true);
    try {
      const response = await verifyAuthentication(otp);
      if (response.error) {
        toast.error(response.error);
      } else {
        toast.success("Redirecting to dashboard...");
        setTimeout(() => {
          window.location.href = "/student/dashboard";
        }, 2000);
      }
    } catch (error) {
      console.error("Failed to verify TOTP", error);
      toast.error("Failed to verify TOTP");
    } finally {
      setLoading2(false);
    }
  };

  const handleLogout = async () => {
    await logout();
    window.location.href = "/";
  };

  return (
    <>
      {loading ? (
        // Show the loader while loading the state
        <div className="flex flex-col h-[30vh] items-center justify-center">
          <Loader2 size={30} className="animate-spin" />
        </div>
      ) : (
        <div className="flex flex-col">
          {isSecuring ? (
            // Show this only if the user is still securing the account
            <div className="flex flex-col">
              <h1 className="text-2xl text-primary text-center font-bold">
                {isAuthenticated
                  ? "Verify Your Account"
                  : "Secure Your Account"}
              </h1>
              <p className="mt-2 text-muted-foreground text-sm">
                {isAuthenticated
                  ? "To ensure your account's security, please enter the OTP code displayed in your authenticator app."
                  : "For added protection, you must enroll in Multi-Factor Authentication (MFA) to secure your account."}
              </p>
              <p className="mt-3 text-muted-foreground text-sm">
                You can use apps like Salesforce Authenticator, Google
                Authenticator, Microsoft Authenticator, or any preferred
                authenticator app.
              </p>

              <p className="mt-4 text-sm text-muted-foreground">
                If you encounter any issues during the setup, please{" "}
                <a
                  href="mailto:kylemastercoder14@gmail.com"
                  className="text-primary underline"
                >
                  contact support
                </a>{" "}
                for assistance.
              </p>
              <Button className="mt-5" onClick={() => setIsSecuring(false)}>
                Continue
              </Button>
            </div>
          ) : (
            <>
              {isAuthenticated ? (
                // Show if the user is authenticated
                <>
                  <p className="text-sm">
                    To keep your account secure, we verify your identity.
                  </p>
                  <p className="text-sm mt-3">
                    Enter the code generated by your authenticator app.
                  </p>
                  <p className="font-semibold mt-3 text-sm">Account:</p>
                  <div className="flex items-center mt-1 gap-2">
                    <User className="w-4 h-4" />
                    <p className="text-sm">{studentNumber}</p>
                  </div>
                  <div className="flex flex-col gap-4 mt-5">
                    <Label>One Time Password Code (OTP)</Label>
                    <OtpStyledInput
                      className="md:!w-[4.8rem] !w-[35px] md:!h-14 !h-10 border dark:border-input border-zinc-300"
                      numInputs={6}
                      value={otp}
                      onChange={(value) => setOtp(value)}
                    />
                  </div>
                  <div className="flex items-center gap-2 mt-5 w-full">
                    <Button
                      onClick={handleLogout}
                      className="w-full"
                      variant="destructive"
                    >
                      Cancel
                    </Button>
                    <Button
                      className="w-full"
                      disabled={loading2}
                      onClick={handleConnect}
                    >
                      {loading2 && (
                        <Loader2 className="animate-spin mr-2 w-4 h-4" />
                      )}
                      Verify
                    </Button>
                  </div>
                </>
              ) : (
                // Show this part if not authenticated
                <>
                  <p className="text-sm">
                    Connect an authenticator app that generates verification
                    codes. You can use the codes when we need to verify your
                    identity.
                  </p>
                  <ul className="text-sm mt-3">
                    <ol>
                      1. Download and install an authenticator app on your
                      mobile device.
                    </ol>
                    <ol>2. Use the app to scan this QR code.</ol>
                    <ol>3. Enter the code generated by the app.</ol>
                  </ul>
                  <Image
                    className="mt-5 mx-auto"
                    width={200}
                    height={200}
                    alt="QR Code for MFA Setup"
                    src={qrCode ?? ""}
                  />
                  <div className="flex flex-col gap-2 mt-5">
                    <Label>One Time Password Code (OTP)</Label>
                    <Input
                      placeholder="123456"
                      disabled={loading2}
                      type="number"
                      value={otp}
                      onChange={(e) => setOtp(e.target.value)}
                      required
                    />
                  </div>
                  <div className="flex flex-col mt-3 gap-2">
                    <Label>Student Number</Label>
                    <Input
                      disabled
                      placeholder="KLD-123-456"
                      value={studentNumber}
                      required
                    />
                  </div>
                  <Button
                    disabled={loading2}
                    className="mt-5"
                    onClick={handleConnect}
                  >
                    {loading2 && (
                      <Loader2 className="animate-spin mr-2 w-4 h-4" />
                    )}
                    Connect
                  </Button>
                </>
              )}
            </>
          )}
        </div>
      )}
    </>
  );
};

export default AuthenticatorComponent;
