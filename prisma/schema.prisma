// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  username String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Students {
  id             String  @id @default(cuid())
  studentNumber  String  @unique
  firstName      String
  middleName     String?
  lastName       String
  extensionName  String?
  birthDate      String
  age            String
  gender         String
  civilStatus    String
  phoneNumber    String
  region         String
  province       String
  city           String
  barangay       String
  houseNumber    String
  zipCode        String
  email          String
  password       String
  profileImage   String?
  isArchive      Boolean @default(false)
  isAuthenticate Boolean @default(false)
  otpSecret      String?
  otpQrCode      String?

  elementarySchool String
  highSchool       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  yearLevelId String
  yearLevels  YearLevels @relation(fields: [yearLevelId], references: [id])

  programId String
  programs  Programs @relation(fields: [programId], references: [id])

  sectionId String
  sections  Sections @relation(fields: [sectionId], references: [id])

  grades          Grades[]
  documentRequest DocumentRequest[]
  consultation    Consultation[]
  advising        Advising[]
}

model Teachers {
  id            String  @id @default(cuid())
  employeeId    String
  firstName     String
  middleName    String?
  lastName      String
  extensionName String?
  birthDate     String
  age           String
  gender        String
  civilStatus   String
  phoneNumber   String
  region        String
  province      String
  city          String
  barangay      String
  houseNumber   String
  zipCode       String
  email         String
  password      String
  profileImage  String?
  isArchive     Boolean @default(false)
  position      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asssignTeacher      AssignTeacher[]
  assignCourseTeacher AssignCourseTeacher[]
  consultation        Consultation[]
  advising            Advising[]
  grades              Grades[]
}

model AssignTeacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String
  teacher   Teachers @relation(fields: [teacherId], references: [id])

  sectionId String
  section   Sections @relation(fields: [sectionId], references: [id])
}

model AssignCourseTeacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String
  teacher   Teachers @relation(fields: [teacherId], references: [id])

  sectionId String
  section   Sections @relation(fields: [sectionId], references: [id])

  courseId String
  course   Courses @relation(fields: [courseId], references: [id])
}

model YearLevels {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Students[]
  section Sections[]
}

model Programs {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  isArchive Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Students[]
  section Sections[]
  grades  Grades[]
}

model Sections {
  id        String   @id @default(cuid())
  name      String   @unique
  isArchive Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  yearLevelId String
  yearLevels  YearLevels @relation(fields: [yearLevelId], references: [id])

  programId String
  programs  Programs @relation(fields: [programId], references: [id])

  student             Students[]
  assignTeacher       AssignTeacher[]
  assignCourseTeacher AssignCourseTeacher[]
  grades              Grades[]
}

model Courses {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  unit         Int
  prerequisite String?
  isArchive    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignCourseTeacher AssignCourseTeacher[]
  grades              Grades[]
  consultation        Consultation[]
  advising            Advising[]
}

model Semester {
  id        String   @id @default(cuid())
  name      String
  year      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Logs {
  id        String   @id @default(cuid())
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Period {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grades {
  id            String   @id @default(cuid())
  studentNumber String
  student       Students @relation(fields: [studentNumber], references: [studentNumber])
  courseCode    String
  course        Courses  @relation(fields: [courseCode], references: [code])
  programCode   String
  programs      Programs @relation(fields: [programCode], references: [code])
  sectionName   String
  section       Sections @relation(fields: [sectionName], references: [name])
  period        String
  grade         Float
  remarks       String
  gradeId       String

  teacherId String
  teacher   Teachers @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UploadedEcr {
  id                 String  @id @default(cuid())
  teacherId          String
  name               String
  teacherSigned      Boolean @default(true)
  programChairSigned Boolean @default(false)
  deanSigned         Boolean @default(false)
  registrarSigned    Boolean @default(false)

  gradeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Support {
  id         String @id @default(cuid())
  email      String
  name       String
  concerns   String
  attachment String
  status     String @default("Pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  feedback  String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentRequest {
  id           String @id @default(cuid())
  typeDocument String
  purpose      String
  status       String @default("Pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentNumber String
  student       Students @relation(fields: [studentNumber], references: [studentNumber])
}

model Consultation {
  id      String @id @default(cuid())
  concern String
  comment String
  status  String @default("Pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String
  teacher   Teachers @relation(fields: [teacherId], references: [id])

  studentNumber String
  student       Students @relation(fields: [studentNumber], references: [studentNumber])

  courseId String
  course   Courses @relation(fields: [courseId], references: [id])
}

model Advising {
  id      String @id @default(cuid())
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentNumber String
  student       Students @relation(fields: [studentNumber], references: [studentNumber])

  teacherId String
  teacher   Teachers @relation(fields: [teacherId], references: [id])

  courseId String
  course   Courses @relation(fields: [courseId], references: [id])
}

model Database {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
